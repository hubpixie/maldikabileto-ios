//
// APIAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class APIAPI { 
    /**
     クレジットカード登録
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addCard(body: CardForAdd? = nil, completion: @escaping ((_ data: Card?,_ error: Error?) -> Void)) {
        addCardWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     クレジットカード登録
     - POST /client/card
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * すでに登録済みのカードを登録しようとした場合は409を返す * ベリトランスにカード情報を登録
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Card> 
     */
    open class func addCardWithRequestBuilder(body: CardForAdd? = nil) -> RequestBuilder<Card> {
        let path = "/client/card"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Card>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter cardId
     */
    public enum _changeDefaultCard: String { 
    }

    /**
     標準クレジットカード変更
     
     - parameter cardId: (path) カードID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changeDefaultCard(cardId: _changeDefaultCard, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        changeDefaultCardWithRequestBuilder(cardId: cardId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     標準クレジットカード変更
     - PUT /client/card/{card_id}
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * ベリトランスに登録済みのカードの「標準カードフラグ」を変更する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter cardId: (path) カードID 

     - returns: RequestBuilder<Void> 
     */
    open class func changeDefaultCardWithRequestBuilder(cardId: _changeDefaultCard) -> RequestBuilder<Void> {
        var path = "/client/card/{card_id}"
        let cardIdPreEscape = "\(cardId.rawValue)"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter cardId
     */
    public enum _deleteCard: String { 
    }

    /**
     クレジットカード削除
     
     - parameter cardId: (path) カードID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteCard(cardId: _deleteCard, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteCardWithRequestBuilder(cardId: cardId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     クレジットカード削除
     - DELETE /client/card/{card_id}
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * 対象ユーザーの未使用チケットを全て削除する * 対象ユーザーのクレジットカード情報を、ベリトランスから削除する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter cardId: (path) カードID 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteCardWithRequestBuilder(cardId: _deleteCard) -> RequestBuilder<Void> {
        var path = "/client/card/{card_id}"
        let cardIdPreEscape = "\(cardId.rawValue)"
        let cardIdPostEscape = cardIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{card_id}", with: cardIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter ticketNumber
     */
    public enum _deleteTicket: String { 
    }

    /**
     チケット削除
     
     - parameter ticketNumber: (path) チケット番号 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTicket(ticketNumber: _deleteTicket, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTicketWithRequestBuilder(ticketNumber: ticketNumber).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     チケット削除
     - DELETE /client/ticket/{ticket_number}
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * 対象のチケットが削除可能か(未使用か)チェック。未使用でなければ406を返す * 対象ユーザのチケットを削除(論理削除)する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter ticketNumber: (path) チケット番号 

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTicketWithRequestBuilder(ticketNumber: _deleteTicket) -> RequestBuilder<Void> {
        var path = "/client/ticket/{ticket_number}"
        let ticketNumberPreEscape = "\(ticketNumber.rawValue)"
        let ticketNumberPostEscape = ticketNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ticket_number}", with: ticketNumberPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Commoneyユーザー退会
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteUserWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Commoneyユーザー退会
     - DELETE /client/user
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * 対象ユーザーのチケットに未使用のチケットがないかチェック(あれば412を返す) * ベリトランス側のアカウントを削除する(AccountDeleteRequestDto) * Firebase側のユーザーを削除する * CommoneyDBからユーザを削除(論理削除)する
     - BASIC:
       - type: http
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/client/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     クレジットカード一覧取得
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCardList(completion: @escaping ((_ data: CardList?,_ error: Error?) -> Void)) {
        getCardListWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     クレジットカード一覧取得
     - GET /client/card
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * ベリトランスに登録されているクレジットカード情報を全て取得する
     - BASIC:
       - type: http
       - name: bearerAuth

     - returns: RequestBuilder<CardList> 
     */
    open class func getCardListWithRequestBuilder() -> RequestBuilder<CardList> {
        let path = "/client/card"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CardList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter page
     */
    public enum _getInquireList: Int { 
    }

    /**
     * enum for parameter limit
     */
    public enum _getInquireList: Int { 
    }

    /**
     お知らせ一覧取得
     
     - parameter page: (query) 現在ページ数 (optional)
     - parameter limit: (query) 取得最大件数 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInquireList(page: _getInquireList? = nil, limit: _getInquireList? = nil, completion: @escaping ((_ data: InquireList?,_ error: Error?) -> Void)) {
        getInquireListWithRequestBuilder(page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     お知らせ一覧取得
     - GET /client/inquire
     - #### 処理概要 * 有効なお知らせをすべて取得する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter page: () 現在ページ数 (optional)
     - parameter limit: () 取得最大件数 (optional)

     - returns: RequestBuilder<InquireList> 
     */
    open class func getInquireListWithRequestBuilder(page: _getInquireList? = nil, limit: _getInquireList? = nil) -> RequestBuilder<InquireList> {
        let path = "/client/inquire"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.rawValue
        ])

        let requestBuilder: RequestBuilder<InquireList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter ticketAmount
     */
    public enum _getPreviewTicket: Int { 
    }

    /**
     * enum for parameter ticketExpirationDate
     */
    public enum _getPreviewTicket: String { 
    }

    /**
     * enum for parameter ticketTitle
     */
    public enum _getPreviewTicket: String { 
    }

    /**
     プレビュー用チケット画像取得
     
     - parameter ticketAmount: (query) チケットの金額 (optional)
     - parameter ticketExpirationDate: (query) チケットの有効期限日 (optional)
     - parameter ticketTitle: (query) チケットのタイトル (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getPreviewTicket(ticketAmount: _getPreviewTicket? = nil, ticketExpirationDate: _getPreviewTicket? = nil, ticketTitle: _getPreviewTicket? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getPreviewTicketWithRequestBuilder(ticketAmount: ticketAmount, ticketExpirationDate: ticketExpirationDate, ticketTitle: ticketTitle).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     プレビュー用チケット画像取得
     - GET /client/ticket-preview
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * プレビュー用のダミーQRコードを含んだチケット画像を取得する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter ticketAmount: () チケットの金額 (optional)
     - parameter ticketExpirationDate: () チケットの有効期限日 (optional)
     - parameter ticketTitle: () チケットのタイトル (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func getPreviewTicketWithRequestBuilder(ticketAmount: _getPreviewTicket? = nil, ticketExpirationDate: _getPreviewTicket? = nil, ticketTitle: _getPreviewTicket? = nil) -> RequestBuilder<Any> {
        let path = "/client/ticket-preview"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ticket_amount": ticketAmount?.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ticket_expiration_date": ticketExpirationDate?.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ticket_title": ticketTitle?.rawValue
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     チケット発行許可状態取得
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getStateOfMailAddressApproval(completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        getStateOfMailAddressApprovalWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     チケット発行許可状態取得
     - GET /client/user/ticket-issue-permission
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * Firebaseに登録されたメールユーザのメールアドレス承認状態を返す * SNSログインユーザ(メールユーザではない)の場合は、メールアドレス承認状態は見ずに、trueを返す
     - BASIC:
       - type: http
       - name: bearerAuth

     - returns: RequestBuilder<Any> 
     */
    open class func getStateOfMailAddressApprovalWithRequestBuilder() -> RequestBuilder<Any> {
        let path = "/client/user/ticket-issue-permission"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter ticketNumber
     */
    public enum _getTicket: String { 
    }

    /**
     チケット詳細取得
     
     - parameter ticketNumber: (path) チケット番号 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTicket(ticketNumber: _getTicket, completion: @escaping ((_ data: Ticket?,_ error: Error?) -> Void)) {
        getTicketWithRequestBuilder(ticketNumber: ticketNumber).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     チケット詳細取得
     - GET /client/ticket/{ticket_number}
     - #### 処理概要 * 対象のチケット番号のチケットを1件取得する * チケット画像を生成し、画像を返す * 使用済みチケットの場合は、チケット画像ではなく、レシート画像を返す
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter ticketNumber: (path) チケット番号 

     - returns: RequestBuilder<Ticket> 
     */
    open class func getTicketWithRequestBuilder(ticketNumber: _getTicket) -> RequestBuilder<Ticket> {
        var path = "/client/ticket/{ticket_number}"
        let ticketNumberPreEscape = "\(ticketNumber.rawValue)"
        let ticketNumberPostEscape = ticketNumberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ticket_number}", with: ticketNumberPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Ticket>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     * enum for parameter filter
     */
    public enum Filter_getTicketList: Int { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getTicketList: String { 
        case ticketType = "ticket_type"
        case ticketStatus = "ticket_status"
        case ticketAmount = "ticket_amount"
        case ticketExpirationDate = "ticket_expiration_date"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case deletedAt = "deleted_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_getTicketList: String { 
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter page
     */
    public enum _getTicketList: Int { 
    }

    /**
     * enum for parameter limit
     */
    public enum _getTicketList: Int { 
    }

    /**
     チケット一覧取得
     
     - parameter filter: (query) フィルタ  (0:すべて, 1:未使用, 2:決済失敗, 3:使用済, 4:期限切れ, 5:自分で使用) 
     - parameter sort: (query) ソート項目  (ticket_type:チケット種別, ticket_status:チケットステータス, ticket_amount:チケット金額, ticket_expiration_date:チケット有効期限日, created_at:チケット作成日時, updated_at:チケット更新日時, deleted_at:チケット削除日時) 
     - parameter order: (query) ソート順  (asc:昇順, desc:降順) 
     - parameter page: (query) 現在ページ数 (optional)
     - parameter limit: (query) 取得最大件数 (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTicketList(filter: Filter_getTicketList, sort: Sort_getTicketList, order: Order_getTicketList, page: _getTicketList? = nil, limit: _getTicketList? = nil, completion: @escaping ((_ data: TicketList?,_ error: Error?) -> Void)) {
        getTicketListWithRequestBuilder(filter: filter, sort: sort, order: order, page: page, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     チケット一覧取得
     - GET /client/ticket
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * 対象ユーザーに紐づくチケットをすべて取得する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter filter: () フィルタ  (0:すべて, 1:未使用, 2:決済失敗, 3:使用済, 4:期限切れ, 5:自分で使用) 
     - parameter sort: () ソート項目  (ticket_type:チケット種別, ticket_status:チケットステータス, ticket_amount:チケット金額, ticket_expiration_date:チケット有効期限日, created_at:チケット作成日時, updated_at:チケット更新日時, deleted_at:チケット削除日時) 
     - parameter order: () ソート順  (asc:昇順, desc:降順) 
     - parameter page: () 現在ページ数 (optional)
     - parameter limit: () 取得最大件数 (optional)

     - returns: RequestBuilder<TicketList> 
     */
    open class func getTicketListWithRequestBuilder(filter: Filter_getTicketList, sort: Sort_getTicketList, order: Order_getTicketList, page: _getTicketList? = nil, limit: _getTicketList? = nil) -> RequestBuilder<TicketList> {
        let path = "/client/ticket"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "sort": sort.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "order": order.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": page?.rawValue, 
        ])
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.rawValue
        ])

        let requestBuilder: RequestBuilder<TicketList>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Commoneyユーザー情報取得
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        getUserWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Commoneyユーザー情報取得
     - GET /client/user
     - #### 処理概要 * ユーザーの検索は、Firebaseの識別子(ユーザーUID)で行うため、GETパラメータにuser_id等は不要 * Firebaseに存在するユーザーが、CommoneyDBにも存在するか検索する(存在しなければ404を返す)
     - BASIC:
       - type: http
       - name: bearerAuth

     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder() -> RequestBuilder<User> {
        let path = "/client/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     チケット発行
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publishTicket(body: TicketForAdd? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        publishTicketWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     チケット発行
     - POST /client/ticket
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * チケット発行権限があるかのチェックを行う   * メールユーザーかつ、メール認証が済んでいない場合で、その他SNS認証なしの場合は406を返す * クレジットカードの存在チェックを行う * チケット番号を生成する   * CommoneyDB内に登録されているチケット番号と重複した場合は、3回まで再生成する   * 3回繰り返しても重複してしまう場合は409を返す(イレギュラー) * 対象ユーザーのチケットを登録する * チケット画像を生成し、画像を返す
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func publishTicketWithRequestBuilder(body: TicketForAdd? = nil) -> RequestBuilder<Any> {
        let path = "/client/ticket"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Commoneyユーザー登録
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registUser(body: UserForAdd? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        registUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Commoneyユーザー登録
     - POST /client/user
     - #### 処理概要 * すでにユーザが登録されていないかチェック(登録されている場合は409を返す) * CommoneyDBにユーザを登録する * ベリトランス側にアカウントを作成する(AccountAddRequestDto)
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func registUserWithRequestBuilder(body: UserForAdd? = nil) -> RequestBuilder<Void> {
        let path = "/client/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }


    /**
     Commoneyユーザー情報変更
     
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(body: UserForUpdate? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Commoneyユーザー情報変更
     - PUT /client/user
     - #### 処理概要 * CommoneyDBにユーザーが存在するかチェック(存在しなければ404を返す) * CommoneyDBのユーザー情報を更新する(電話番号、生年月日、性別、ニックネーム、FCMトークン) * メールアドレス変更時は、Firebaseの情報を更新し、メールアドレス変更確認メールをユーザーに送信する
     - BASIC:
       - type: http
       - name: bearerAuth
     
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func updateUserWithRequestBuilder(body: UserForUpdate? = nil) -> RequestBuilder<Void> {
        let path = "/client/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: )
    }

}
